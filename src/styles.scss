@import 'reset';
@import '_colors';

@font-face {
	font-family: 'Recursive';
	src: url(/src/assets/fonts/Recursive_VF_1.078.woff2) format('woff2');
}

:root {
	--btnSize: 26px;
	--spacing: 3px;
	--font-size: 14px;
	--radius: 6px;

	--user-divider-thickness: 0.25px;
	--user-divider-color: var(--white);
}

$orange-gradient: linear-gradient(0deg, var(--pale-orange) 0%, var(--orange) 100%);
$blue-gradient: linear-gradient(0deg, var(--gray-blue) 0%, var(--blue) 100%);
$dark-blue-gradient: linear-gradient(0deg, var(--dark-blue) 0%, var(--darker-blue) 100%);

// Bevel shadow effects
$bevel-shadow-sink-in: 0 -1px 2px rgba(
			$color: var(--white-rgb),
			$alpha: 0.1,
		) inset,
	0 1px 2px
		rgba(
			$color: var(--black-rgb),
			$alpha: 0.25,
		)
		inset;

$bevel-shadow-pop-out: 0 1px 2px
		rgba(
			$color: var(--white-rgb),
			$alpha: 0.05,
		)
		inset,
	0 -1px 2px rgba(
			$color: var(--black-rgb),
			$alpha: 0.2,
		) inset;

button,
label,
input {
	appearance: none;
	-webkit-appearance: none;
	-moz-appearance: none;
	outline: none;
	cursor: pointer;
	border: none;
	background: none;
	padding: 0;
	margin: 0;
	font: inherit;
	color: inherit;
	min-width: 0;
}

button {
	height: 100%;
	padding: var(--spacing);
	border-radius: var(--radius);

	font-size: var(--font-size);

	box-shadow: none;

	transition: background 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

	&:hover {
		background: var(--pink);
		box-shadow: $bevel-shadow-pop-out;
	}

	&:active {
		background: var(--);
		box-shadow: $bevel-shadow-sink-in;
	}
}

#root {
	background: $dark-blue-gradient;
	padding: 36px 8px 8px;
	border-radius: 16px;
	// margin-top: -36px;

	font: 400 16px 'Recursive', 'Roboto', sans-serif;
	color: var(--white);

	min-width: 900px;

	user-select: none;
}

#mainContainer {
	display: flex;
	flex-direction: column;
	position: relative;
	width: 100%;
	height: 100%;
	// gap: 8px;
	// background-color: var(--black);

	// overflow: hidden;
}

#mediaContainer {
	--controller-offset: 64px;

	cursor: pointer;

	flex: 1 0 auto;
	position: relative;
	display: block;
	border-radius: 8px;
	overflow: hidden;
	z-index: 1;

	height: calc(100% - var(--controller-offset));

	background-color: var(--black);

	box-shadow: 0 1px 6px 0px rgba($color: var(--black-rgb), $alpha: 0.8);

	transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out, border-radius 0.2s ease-in-out;

	--static-dark: var(--gray5);
	--static-light: var(--gray7);

	#infoOverlayElem {
		position: absolute;
		display: flex;
        flex-direction: column;
		width: 100%;
		height: 100%;
		align-items: center;
		justify-content: center;

		font-size: 3rem;
		text-shadow: 1px 0px 2px var(--black), 0px 1px 2px var(--black), -1px 0px 2px var(--black), 0px -1px 2px var(--black);
        white-space: pre;
        text-align: center;

        font-weight: 700;

		z-index: 4;
        opacity: 1;

        transition: opacity 0.15s ease-in-out;

        &:not(:has(*)) {
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
        }
	}


	&.empty,
	&:has(.auto) {
		cursor: default;
	}

    &:has(#videoClipper.divider:not(.stuck)) {
        cursor: col-resize;
    }

	&.zoom-out-anim {
		transform: scale(1.005);
        border-radius: 13px;
		box-shadow: 0 0 4px 4px rgba($color: var(--pink-rgb), $alpha: 1);
	}

	&.zoom-in-anim {
        transform: scale(0.994, 0.989);
        border-radius: 0;
		box-shadow: 0 0 4px 3px rgba($color: var(--pink-rgb), $alpha: 1);
	}

	.video-info {
		position: absolute;
		inset: 1rem auto auto 1rem;

		display: flex;
		gap: 0.5rem;
		align-items: center;

		color: var(--white);
		font-size: 1rem;
		font-weight: 500;
		filter: drop-shadow(0 0 0.125rem var(--black));

		width: calc(50vw - 2rem);
		height: auto;

		z-index: 4;

		&.right-video-info {
			inset: 1rem 1rem auto auto;
			justify-content: flex-end;
		}

		.video-label {
			cursor: pointer;
			transition: color 0.15s ease-in-out, filter 0.15s ease-in-out;

			&:hover {
				color: var(--pink);
				filter: drop-shadow(0 0 0.25rem var(--pink));
			}
		}

		.video-closer {
			display: flex;
			height: auto;

			~ .video-closer {
				inset: 1rem 1rem auto auto;
			}

			background: transparent;

			color: var(--white);
			svg {
				fill: currentColor;
				stroke: currentColor;
			}

			filter: drop-shadow(0 0 0.125rem var(--black));
			cursor: pointer;

			transform: scale(1);
			transition: transform 0.15s ease-in-out, stroke 0.15s ease-in-out, color 0.15s ease-in-out, filter 0.15s ease-in-out;

			z-index: 4;

			&:hover {
				color: var(--pink);
				filter: drop-shadow(0 0 0.25rem var(--pink));
				transform: scale(1.25);
			}
		}
	}

	label.file-input {
		--input-size: 150px;
		--input-offset: 75%;
		position: absolute;
		top: calc(50% - var(--input-size) / 2);
		left: calc(var(--input-offset) - var(--input-size) / 2);

		&:nth-child(2) {
			--input-offset: 25%;
		}

		display: flex;
		flex-wrap: wrap;
		gap: calc(4 * var(--spacing)) 0;

		text-align: center;
		justify-content: center;
		align-items: center;
		align-content: center;
		justify-items: center;

		z-index: 4;

		width: var(--input-size);
		height: var(--input-size);

		background: rgba($color: var(--darker-blue-rgb), $alpha: 0.75);
		box-shadow: inset 0px 3px 8px rgba(255, 255, 255, 0.1), inset 0px -3px 8px rgba(0, 0, 0, 0.25);
		backdrop-filter: blur(4px);
		/* Note: backdrop-filter has minimal browser support */
		border-radius: 16px;

		appearance: none;

		transition: background 0.15s ease-in-out, box-shadow 0.15s ease-in-out, transform 0.15s ease-in-out;

		> span {
			grid-column: 1 / -1;
			display: block;
			font-weight: 500;
			font-size: 1rem;
		}

		> input {
			display: none;
		}

		&:hover {
			background: rgba($color: var(--darker-blue-rgb), $alpha: 1);
		}
	}

	// generate tv static

	&.empty,
	#videoClipper.empty {
		background:
        // repeating-radial-gradient(var(--static-dark) 0 0.0001%, var(--static-light) 0 0.0002%) 50% 0/2500px 2500px,
			repeating-conic-gradient(var(--static-dark) 0 0.0001%, var(--static-light) 0 0.0002%) 60% 60%/2500px 2500px;
		// background-blend-mode: color;
		animation: static-anim 0.2s infinite alternate;
	}

	#videoClipper {
		position: relative;
        background-color: var(--black);
		box-shadow: 2px 0 0 calc(var(--user-divider-thickness) - 1.5px) var(--user-divider-color);

		will-change: contents;

		z-index: 0;

		--icon-url: url("data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-unlock' viewBox='0 0 16 16'><path d='M11 1a2 2 0 0 0-2 2v4a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h5V3a3 3 0 0 1 6 0v4a.5.5 0 0 1-1 0V3a2 2 0 0 0-2-2M3 8a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1z'/></svg>");
		--icon-color: var(--white);

		&:after {
			content: '';
			background: var(--icon-color);
			mask-image: var(--icon-url);
			mask-size: contain;
			mask-repeat: no-repeat;
			position: absolute;

			inset: 50% var(--spacing) auto auto;
			width: 1.25rem;
			height: 1.25rem;

			transform: translateY(-50%);

			z-index: 4;
		}

		&.auto:after {
			content: none;
		}

		&.flipped:after {
			inset: 50% auto auto var(--spacing);
		}

		&.stuck {
			--icon-url: url("data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'><path d='M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2m3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2'/></svg>");
			--icon-color: var(--pink);
		}

		&.divider {
			width: 100%;
			height: 100%;
			top: 0;
			bottom: 0;
			overflow: hidden;
		}

		&.boxCutout,
		&.circleCutout {
			// clip-path: circle(50% at 50% 50%);
			overflow: hidden;
			transform: translate(-50%, -50%);

			box-shadow: 0 0 0 calc(var(--user-divider-thickness) + 0.75px) var(--user-divider-color);

			transition: border-radius 0.25s ease-in-out, box-shadow 0.25s ease-in-out;
		}

		&.circleCutout {
			border-radius: 50%;
		}
	}

	video {
		left: 50%;
		top: 50%;
		transform: translate(-50%, -50%);
		display: block;
		height: auto;
		position: absolute;
		background: var(--black);
	}

	#videoClipper video {
		width: 200%;
		z-index: 1;
	}
}

@keyframes static-anim {
	100% {
		background-position: 50% 0, 60% 50%;
	}
}

@keyframes position-delay-rel-to-abs {
	from {
		position: relative;
	}
	to {
		position: absolute;
	}
}
@keyframes position-delay-abs-to-rel {
	from {
		position: absolute;
	}
	to {
		position: relative;
	}
}

#controllerBar {
	--controller-spacing: 0px;

	flex: 0 0 calc(32px + var(--controller-spacing));

	padding: calc(var(--controller-spacing) / 2);
	inset: auto var(--controller-spacing) var(--controller-spacing);
	border-radius: 0 0 8px 8px;

	background-color: var(--dark-blue);

	display: grid;
	grid: 1fr 1fr / 1fr auto 1fr;
	gap: 0 8px;

	z-index: 999;

	transition: opacity 1s linear 1s, inset 0.5s ease-in-out 0s, padding 0.5s ease-in-out 0s, 0.5s ease-in-out 0s, border-radius 0.5s ease-in-out 0s;

	&.disabled {
		.control-slider-container,
		.control-radio-group,
		button,
		label,
		input {
			opacity: 0.5;
			pointer-events: none;

			&.ignore-disabled {
				opacity: 1;
				pointer-events: auto;
			}
		}

		&:after {
			content: 'Please select 2 videos to compare.';
			position: absolute;
			display: flex;
			bottom: 90%;
			justify-content: center;
			align-items: center;
			background: rgba(0, 0, 0, 0.75);
			backdrop-filter: blur(8px);
			padding: 0.5rem 1rem;
			border-radius: var(--radius);

			left: 50%;
			transform: translateX(-50%);

			font-size: 2rem;
			font-weight: 700;

			opacity: 0;

			transition: opacity 0.25s ease-in-out 0s, bottom 0.25s ease-in-out 0s;
		}

		&:hover:after {
			opacity: 1;
			bottom: 100%;
		}
	}

	&.floating {
		--controller-spacing: 16px;
		// position: absolute;

		background-color: rgba($color: var(--darker-blue-rgb), $alpha: 0.75);
		border-radius: var(--controller-spacing);

		opacity: 0;

		box-shadow: 0 3px 8px rgba($color: var(--white-rgb), $alpha: 0.1) inset, 0 -3px 8px rgba($color: var(--black-rgb), $alpha: 0.25) inset;

		backdrop-filter: blur(var(--controller-spacing));

		animation: position-delay-rel-to-abs;
		animation-duration: 0s;
		animation-delay: 0s;
		animation-fill-mode: both;

		#mainContainer:hover > &,
		#mainContainer:focus-within > & {
			opacity: 1;
			transition: opacity 0.3s linear 0s, inset 0.5s ease-in-out 0s, padding 0.5s ease-in-out 0s, 0.5s ease-in-out 0s, border-radius 0.5s ease-in-out 0s;
		}
	}

	&.docked {
		z-index: 0;
		animation: position-delay-abs-to-rel;
		animation-duration: 0s;
		animation-delay: 0.5s;
		animation-fill-mode: both;
	}

	#videoProgressSlider {
		grid-column: 1 / -1;
	}

	.control-slider-container {
		--slider-dimen: 6px;
		--slider-spacing: 8px;

		display: flex;
		// grid: 1fr / 100px auto;
		align-items: center;
		gap: 4px;
		min-width: 100px;

		.rc-slider {
			margin: var(--slider-spacing);
			padding: unset;
			flex: 1 0 100px;
			height: var(--slider-dimen);
			cursor: pointer;

			.rc-slider-rail,
			.rc-slider-track {
				height: var(--slider-dimen);
				border-radius: calc(var(--slider-dimen) / 2);
			}

			.rc-slider-rail {
				background: linear-gradient(180deg, #aab6cc 0%, #7f96c0 100%);
			}

			.rc-slider-track {
				background: linear-gradient(360deg, #ff5a46 0%, #ff7844 100%);
			}

			.rc-slider-handle {
				width: calc(var(--slider-spacing) + var(--slider-dimen));
				height: calc(var(--slider-spacing) + var(--slider-dimen));

				margin-top: calc(-1 * var(--slider-spacing) / 2);

				background: var(--pink);
				opacity: 1;
				border: 2px solid #ffffff;
				border-radius: 50%;

				&.rc-slider-handle-dragging {
					box-shadow: 0 0 0 3px var(--orange);
				}
			}

			.rc-slider-step {
				position: absolute;
				top: calc(var(--slider-spacing) * -1);
				bottom: calc(var(--slider-spacing) * -1);
				left: 0;
				right: 0;
				height: auto;
			}
		}

		.unit-input-container {
			flex: 0 0;

			// width: min-content;
			// min-width: 0;
			display: flex;
			align-items: center;
			gap: 0.5ch;
			text-align: center;
			font-size: var(--font-size);
			padding: var(--spacing) 8px;

			background: #08162f;
			box-shadow: $bevel-shadow-pop-out;
			border-radius: 10px;

			input {
				text-align: center;
				width: fit-content;
				min-width: 0;
				max-width: fit-content;
			}

			span {
				text-wrap: nowrap;
			}
		}
	}

	.control-group {
		display: flex;
		align-items: center;
		gap: 4px;

		&:nth-child(2) {
			flex: 0 1 auto;
			justify-content: flex-start;
		}

		&:nth-child(3) {
			min-width: fit-content;
			justify-content: center;
		}

		&:nth-child(4) {
			flex: 1 0 auto;
			justify-content: space-between;
		}

		.control-subgroup {
			display: flex;
			flex: 0 1 auto;
			align-items: center;
			gap: 4px;

			--btnSize: 20px;
			--font-size: 12px;
		}

		label:has(input[type='checkbox']),
		label:has(input[type='radio']) {
			position: relative;
			display: flex;
			align-items: center;
			justify-content: center;
			cursor: pointer;
			user-select: none;

			font-size: var(--font-size);

			height: var(--btnSize);
			padding: var(--spacing);
		}

		.control-checkbox-container,
		.control-radio-group {
			display: flex;
			gap: var(--spacing);
			padding: var(--spacing);
			justify-content: center;
			background-color: var(--dark-blue);
			border-radius: var(--radius);

			box-shadow: $bevel-shadow-sink-in;
		}

		.control-checkbox-container {
			label:has(input[type='checkbox']) {
				border-radius: calc(var(--radius) - var(--spacing));

				&:has(input[type='checkbox']:checked) {
					box-shadow: $bevel-shadow-pop-out;
					background: var(--pink);
				}

				> .lucide {
					aspect-ratio: 1;
					width: calc(var(--btnSize) - 2 * var(--spacing));
					height: calc(var(--btnSize) - 2 * var(--spacing));
				}
			}
		}

		.control-radio-group {
			--radius: 16px;
			align-items: center;

			&.auto-fold {
				--width: var(--btnSize);
				--radio-offset: 0;

				width: calc(var(--width) + 2 * var(--spacing));
				max-width: calc(var(--btnSize) + 2 * var(--spacing));
				overflow: hidden;

				transition: width 0.2s ease-in-out, max-width 0.2s ease-in-out;

				@for $i from 2 through 8 {
					&:has(label:nth-child(#{$i})) {
						// change hover width to the width of the button group plus the spacing between buttons and the spacing on the sides of the container ($i + 1)
						--hover-width: calc(#{$i} * var(--btnSize) + ((#{$i + 1}) * var(--spacing)));

						@for $j from 1 through $i {
							&:has(label:nth-child(#{$j}) > input[type='radio']:checked) {
								// calculate the left offset of the checked radio button to position the checked button in the center of the container when it is folded
								$positionCalc: #{$i - 2 * $j + 1} / 2;
								$leftOffset: calc($positionCalc * var(--btnSize) + ($positionCalc) * var(--spacing));

								--radio-offset: #{$leftOffset};
							}
						}
					}
				}

				&:hover {
					max-width: var(--hover-width);
					width: var(--hover-width);

					--radio-offset: 0 !important;
				}

				> label {
					position: relative;
					left: var(--radio-offset);

					transition: left 0.2s ease-in-out;
				}
			}

			label:has(input[type='radio']) {
				aspect-ratio: 1;
				border-radius: 50%;

				min-width: var(--btnSize);

				&:has(input[type='radio']:checked) {
					box-shadow: $bevel-shadow-pop-out;
					background: var(--pink);
				}

				> .lucide {
					aspect-ratio: 1;
					width: calc(var(--btnSize) - 2 * var(--spacing));
					height: calc(var(--btnSize) - 2 * var(--spacing));
				}
			}
		}
	}
}
